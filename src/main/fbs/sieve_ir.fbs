/**
 * Taken from the SIEVE IR Specification Version 1.0.0
 * with commentary stripped.
 */

// namespace is unique to wiztoolkit
namespace wtk_gen_flatbuffer;

file_extension "sieve";
file_identifier "siev";

union Message {
  Relation,
  Instance,
  Witness,
}

table Root {
  message                 :Message;
}
root_type Root;

table Wire {
  id         :uint64;
}

table WireRange {
  first      :Wire;
  last       :Wire;
}

union WireListElementU {
  Wire,
  WireRange,
}

table WireListElement {
  element   :WireListElementU;
}

table WireList {
  elements    :[WireListElement];
}

table Value {
  value        :[ubyte];
}

table Header {
  version              :string;
  field_characteristic :Value;
  field_degree         :uint32;
}

table Instance {
  header               :Header;
  common_inputs        :[Value];
}

table Witness {
  header               :Header;
  short_witness        :[Value];
}

table Relation {
  header               :Header;
  gateset              :string;
  features             :string;
  functions            :[Function];
  directives           :[Directive];
}

table GateConstant {
  output      :Wire;
  constant    :[ubyte];
}

table GateAssertZero {
  input       :Wire;
}

table GateCopy {
  output      :Wire;
  input       :Wire;
}

table GateFree {
  first       :Wire;
  last        :Wire;
}

table GateInstance {
  output      :Wire;
}

table GateWitness {
  output      :Wire;
}

table GateAdd {
  output      :Wire;
  left        :Wire;
  right       :Wire;
}

table GateMul {
  output      :Wire;
  left        :Wire;
  right       :Wire;
}

table GateAddConstant {
  output      :Wire;
  input       :Wire;
  constant    :[ubyte];
}

table GateMulConstant {
  output      :Wire;
  input       :Wire;
  constant    :[ubyte];
}

table GateAnd {
  output      :Wire;
  left        :Wire;
  right       :Wire;
}

table GateXor {
  output      :Wire;
  left        :Wire;
  right       :Wire;
}

table GateNot {
  output      :Wire;
  input       :Wire;
}

table Function {
  name            :string;
  output_count    :uint64;
  input_count     :uint64;
  instance_count  :uint64;
  witness_count   :uint64;
  body            :[Directive];
}

table GateCall {
  name              :string;
  output_wires      :WireList;
  input_wires       :WireList;
}

table AbstractGateCall {
  name              :string;
  input_wires       :WireList;
}

table GateAnonCall {
  output_wires    :WireList;
  inner           :AbstractAnonCall;
}

table AbstractAnonCall {
  input_wires     :WireList;
  instance_count  :uint64;
  witness_count   :uint64;
  subcircuit      :[Directive];
}

table GateSwitch {
  condition         :Wire;
  output_wires      :WireList;
  cases             :[Value];
  branches          :[CaseInvoke];
}

union CaseInvokeU {
  AbstractGateCall,
  AbstractAnonCall,
}

table CaseInvoke {
  invocation  :CaseInvokeU;
}

union ForLoopBody {
  IterExprFunctionInvoke,
  IterExprAnonFunction
}

table GateFor {
  outputs     :WireList;
  iterator    :string;
  first       :uint64;
  last        :uint64;
  body        :ForLoopBody;
}

union IterExpr {
  IterExprConst,
  IterExprName,
  IterExprAdd,
  IterExprSub,
  IterExprMul,
  IterExprDivConst,
}

table IterExprWireNumber {
  value       :IterExpr;
}

table IterExprConst { value :uint64; }
table IterExprName { name : string; }
table IterExprAdd { left :IterExprWireNumber; right :IterExprWireNumber; }
table IterExprSub { left :IterExprWireNumber; right :IterExprWireNumber; }
table IterExprMul { left :IterExprWireNumber; right :IterExprWireNumber; }
table IterExprDivConst { numer :IterExprWireNumber; denom :uint64; }

table IterExprWireRange {
  first :IterExprWireNumber;
  last  :IterExprWireNumber;
}

union IterExprWireListElementU {
  IterExprWireNumber,
  IterExprWireRange,
}

table IterExprWireListElement {
  element     :IterExprWireListElementU;
}

table IterExprWireList {
  elements    :[IterExprWireListElement];
}

table IterExprFunctionInvoke {
  name     :string;
  outputs  :IterExprWireList;
  inputs   :IterExprWireList;
}

table IterExprAnonFunction {
  outputs          :IterExprWireList;
  inputs           :IterExprWireList;
  instance_count   :uint64;
  witness_count    :uint64;
  body             :[Directive];
}

union DirectiveSet {
  GateConstant,
  GateAssertZero,
  GateCopy,
  GateAdd,
  GateMul,
  GateAddConstant,
  GateMulConstant,
  GateAnd,
  GateXor,
  GateNot,
  GateInstance,
  GateWitness,
  GateFree,
  GateCall,
  GateAnonCall,
  GateSwitch,
  GateFor,
}

table Directive {
  directive      :DirectiveSet;
}
